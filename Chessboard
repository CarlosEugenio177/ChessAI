import chess
import chess.engine

class Chessboard():
    def __init__(self, skill_level=20, time_limit=2.0):
        self.board = chess.Board()
        self.engine = chess.engine.SimpleEngine.popen_uci("/usr/games/stockfish")
        self.engine.configure({"Skill Level": skill_level})
        self.time_limit = time_limit

    def display(self):
        from IPython.display import display, SVG, HTML
        svg = self.board._repr_svg_()
        svg = svg.replace('<svg width="390" height="390"', '<svg width="290" height="290"')
        display(SVG(svg))

        legal_moves = list(self.board.legal_moves)
        suggestions = "<b>Sugestões de Movimentos:</b><br>"

        for move in legal_moves[:5]:
            move_description = self.explain_move(move)
            suggestions += f"{move}: {move_description}<br>"

        display(HTML(f"<div style='margin-top: 20px;'>{suggestions}</div>"))

    def explain_move(self, move):
        piece = self.board.piece_at(move.from_square)
        piece_name = self.get_piece_name(piece)
        return f"Mover {piece_name} de {chess.square_name(move.from_square)} para {chess.square_name(move.to_square)}"

    def get_piece_name(self, piece):
        if piece is None:
            return "?"
        names = {
            'P': 'Peão', 'N': 'Cavalo', 'B': 'Bispo',
            'R': 'Torre', 'Q': 'Rainha', 'K': 'Rei'
        }
        piece_symbol = piece.symbol().upper()
        return names.get(piece_symbol, "?")

    def play_stockfish_move(self):
        # Obtém o melhor movimento sugerido pelo Stockfish
        result = self.engine.play(self.board, chess.engine.Limit(time=self.time_limit))
        # Executa o movimento no tabuleiro
        self.board.push(result.move)

    def make_move(self, move_str):
        try:
            move = chess.Move.from_uci(move_str)
        except ValueError as e:
            print(f"Erro no movimento: {e}")
            return False

        if move in self.board.legal_moves:
            self.board.push(move)
            return True
        else:
            print("Movimento inválido. Tente novamente.")
            return False

    def is_game_over(self):
        return self.board.is_game_over()

    def get_winner(self):
        if self.board.is_checkmate():
            return f"Vitória para {('Brancas' if self.board.turn == chess.WHITE else 'Pretas')}"
        elif self.board.is_stalemate():
            return "Empate por afogamento (stalemate)"
        elif self.board.is_insufficient_material():
            return "Empate por material insuficiente"
        elif self.board.is_seventyfive_moves() or self.board.is_fivefold_repetition():
            return "Empate por regra dos 75 movimentos ou repetição quíntupla"
        elif self.board.is_variant_draw():
            return "Empate por regra da variante"
        else:
            return None

